package sg.edu.nus.cs2020;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

/**
 * Text generator for Problem Set 6.
 * 
 * This class includes on the main method which depends on MarkovModel.java.
 * 
 * Should be run with three arguments:
 * 
 * 1. k - the order of Markov model
 * 2. n - the number of characters to generate
 * 3. filename - the filename of the text to use as model
 * 
 * in that order.
 * 
 * A string of text will then be output to console based on the characters
 * generated by Markov Model.
 * 
 * @author xbili
 *
 */
public class TextGenerator {
	public static void main(String[] args) throws Exception {
		int order = Integer.parseInt(args[0]);
		int numChar = Integer.parseInt(args[1]);
		String filename = args[2];
		
		// Read content of text file
		String content;
		try {
			content = new Scanner(new File(filename)).useDelimiter("\\Z").next();
			
			// Replace all spaces with ''
			content = content.replaceAll("\\s+", "");
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			throw e;
		}
		
		// Initialize Markov Model
		MarkovModel mm = new MarkovModel(content, order);
		
		// Set random seed
		mm.setRandomSeed(new Random().nextInt());
		
		
		// Generate characters
		String initString = content.substring(0, order);
		String temp = initString;
		
		for (int i=0; i < numChar; i++) {
			char newChar = mm.nextCharacter(temp);
			
			// If new char is invalid
			while (newChar == MarkovModel.NOCHARACTER) {
				temp = initString;
				newChar = mm.nextCharacter(temp);
			}
			
			// Drop the first character and add the generated character to the back
			temp = temp.substring(1, temp.length());
			temp = temp.concat(Character.toString(newChar));
			
			System.out.print(newChar);
		}
	}
}
