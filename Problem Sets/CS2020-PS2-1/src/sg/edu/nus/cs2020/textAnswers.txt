1c. In this case, MyFastList works the best because of the priority list. 

	MoveToFrontList, while it may sound good theoretically, is still much slower than FixedLengthList due to the 
	expensive shift operation. The speed gained from accessing repeated elements is offset by the excess time taken 
	in shift operations.
	
	MyFastList would be a best of both worlds, since it keeps the repeated elements in a seperate list, 
	which makes access to repeated elements easy, at the same time avoiding shift operations.
	
1d. In a very large list when integer values overflow, it will jump back to a negative value due to
	the implementation of bits in an integer. Thus a negative value might be due to an overflow in an errorenous
	search by the user, instead of the absence of a key in a list. 
	
	Perhaps a better way of doing this will be to save the number that is not found in another array, such that
	the program will search in that array first, before proceeding to search the main array for the key.