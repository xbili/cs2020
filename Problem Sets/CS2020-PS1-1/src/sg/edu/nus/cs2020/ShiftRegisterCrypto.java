package sg.edu.nus.cs2020;

public class ShiftRegisterCrypto {
	static int[] crypt(int[] password, ShiftRegister shifter) {
		
		int[] result = new int[password.length];
		
		// For each value in the password, we XOR it with the value generated by the ShiftRegister
		// This way, it returns a value regardless of encryption or decryption
		// It requires the `k` value of generate and also a correct tap in order to decrypt the password
		// Or rather, it just requires the seed to decrypt/encrypt the password
		for (int i = 0; i < password.length; i++) {
			result[i] = (password[i] ^ shifter.generate(8));
		}
		
		return result;
	}
	
	public static void main(String args[]) {
		// Test 1
		System.out.println("Test 1");
		int[] password1 = {0, 1, 1, 0, 1, 1, 0, 1};
		
		ShiftRegister shifter = new ShiftRegister(password1.length, 4);
		shifter.setSeed(password1);
		
		// Encryption
		int[] result = crypt(password1, shifter);
		System.out.print("Encrypted password: ");
		for (int i = 0; i < password1.length; i++) {
			System.out.print(result[i]);
		}
		
		// Decryption
		shifter.setSeed(password1);
		result = crypt(result, shifter);
		System.out.println(" ");
		System.out.print("Decrypted password: ");
		for (int i = 0; i < password1.length; i++) {
			System.out.print(result[i]);
		}
		
		// Test 2
		System.out.println("\nTest 2");
		int[] password2 = {0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0};
		ShiftRegister shifter2 = new ShiftRegister(password2.length, 4);
		shifter2.setSeed(password2);
		
		// Encryption
		int[] result2 = crypt(password2, shifter2);
		System.out.print("Encrypted password: ");
		for (int i = 0; i < password2.length; i++) {
			System.out.print(result2[i]);
		}
		
		// Decryption
		shifter2.setSeed(password2);
		result2 = crypt(result2, shifter2);
		System.out.println(" ");
		System.out.print("Decrypted password: ");
		for (int i = 0; i < password2.length; i++) {
			System.out.print(result2[i]);
		}
	}
}
