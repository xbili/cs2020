From the checkSorted test cases, we can deduce that SorterD is DrEvil. It returns an unsorted array with test cases of length
100,000 and above.

To deduce what comes next, we check the two non-stable sorters that we have, SorterB and SorterE. Based on our knowledge of sorting
algorithms, there are only two algorithms so far that, if implemented correctly, is unstable. That is quicksort and selection sort.

This is due to the swapping of the elements, resulting in a change in the relative position after sorting. 

If we compare SorterB and SorterE, we see that SorterB is much faster than SorterE. 

Comparing between the algorithms:

SorterB:
0.047695655 for a random array of 10,000 elements
0.59486014 for a random array of 100,000 elements.

This results in near O(n logn) performance.

SorterE:
0.08673402 for a random array of 10,000 elements.
10.875952 for a random array of 100,000 elements.

This results in near O(n^2) performance.

From this we can deduce that SorterE is Selection Sort, and SorterB is QuickSort.

Now, we have A, C and F remaining. 

We know that MergeSort should perform equally the same for reverse, sorted and repeated arrays.

SorterC:
0.2142131 for sorting a array of repeated elements of length 100,000
0.22772995 for sorting an almost sorted array of length 100,000
0.23534718 for sorting a reverse sorted array of length 100,000
0.23005502 for sorting a sorted array of length 100,000
0.41213116 for sorting a random array of of length 100,000

As we can see, SorterC takes around the same time for repeated, almost sorted, reverse, and sorted. We can deduce
from this that SorterC implements MergeSort.

Now we are left with A and F. 

SorterA:
0.23544466 for sorting a random array of length 10,000
20.397583 for sorting a random array of length 100,000

0.007771847 for sorting an almost sorted array of length 100,000

SorterF:
0.90609604 for sorting a random array of length 10,000
113.44803 for sorting a random array of length 100,000

4.7979016 for sorting an almost sorted array of length 100,000

From the time taken to sort random array, we can see that SorterF takes much more time than SorterA.

Since time itself is not a good estimate, in order to sort an almost sorted array, SorterF takes much longer than
SorterA. We can deduce from this that SorterA is Insertion Sort, and SorterF is Bubble Sort.

Therefore:
A: Insertion Sort
B: QuickSort - NOT STABLE
C: Merge Sort
D: DrEvil
E: Selection Sort - NOT STABLE
F: Bubble Sort
